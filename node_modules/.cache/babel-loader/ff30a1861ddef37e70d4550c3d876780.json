{"ast":null,"code":"import { useState, useRef, useEffect } from \"react\";\nconst PADDINGS = 110;\n\nconst useSliding = (elementWidth, countElements) => {\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [totalInViewport, setTotalInViewport] = useState(0);\n  const [viewed, setViewed] = useState(0);\n  useEffect(() => {\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  const handlePrev = () => {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  };\n\n  const handleNext = () => {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth);\n  };\n\n  const slideProps = {\n    style: {\n      transform: `translate3d(${distance}px, 0, 0)`\n    }\n  };\n  const hasPrev = distance < 0;\n  const hasNext = viewed + totalInViewport < countElements;\n  return {\n    handlePrev,\n    handleNext,\n    slideProps,\n    containerRef,\n    hasPrev,\n    hasNext\n  };\n};\n\nexport default useSliding;","map":{"version":3,"sources":["/Users/chelseawright/Coding_Projects/react_development/React/my-app/src/components/NetflixSlider/useSliding.jsx"],"names":["useState","useRef","useEffect","PADDINGS","useSliding","elementWidth","countElements","containerRef","containerWidth","setContainerWidth","distance","setDistance","totalInViewport","setTotalInViewport","viewed","setViewed","current","clientWidth","Math","floor","handlePrev","handleNext","slideProps","style","transform","hasPrev","hasNext"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA,MAAMC,QAAQ,GAAG,GAAjB;;AAEA,MAAMC,UAAU,GAAG,CAACC,YAAD,EAAeC,aAAf,KAAiC;AAClD,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,CAAD,CAApC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,cAAc,GAAGD,YAAY,CAACS,OAAb,CAAqBC,WAArB,GAAmCd,QAA1D;AAEAM,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACAK,IAAAA,kBAAkB,CAACK,IAAI,CAACC,KAAL,CAAWX,cAAc,GAAGH,YAA5B,CAAD,CAAlB;AACD,GALQ,EAKN,CAACE,YAAY,CAACS,OAAd,CALM,CAAT;;AAOA,QAAMI,UAAU,GAAG,MAAM;AACvBL,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,QAAMa,UAAU,GAAG,MAAM;AACvBN,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,QAAMc,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAG,eAAcd,QAAS;AAArC;AADU,GAAnB;AAIA,QAAMe,OAAO,GAAGf,QAAQ,GAAG,CAA3B;AACA,QAAMgB,OAAO,GAAGZ,MAAM,GAAGF,eAAT,GAA2BN,aAA3C;AAEA,SAAO;AAAEc,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,UAA1B;AAAsCf,IAAAA,YAAtC;AAAoDkB,IAAAA,OAApD;AAA6DC,IAAAA;AAA7D,GAAP;AACD,CAhCD;;AAkCA,eAAetB,UAAf","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\nconst PADDINGS = 110;\n\nconst useSliding = (elementWidth, countElements) => {\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [totalInViewport, setTotalInViewport] = useState(0);\n  const [viewed, setViewed] = useState(0);\n\n  useEffect(() => {\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\n\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  const handlePrev = () => {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  };\n\n  const handleNext = () => {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth);\n  };\n\n  const slideProps = {\n    style: { transform: `translate3d(${distance}px, 0, 0)` },\n  };\n\n  const hasPrev = distance < 0;\n  const hasNext = viewed + totalInViewport < countElements;\n\n  return { handlePrev, handleNext, slideProps, containerRef, hasPrev, hasNext };\n};\n\nexport default useSliding;\n"]},"metadata":{},"sourceType":"module"}